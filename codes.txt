Here are the C programs for string operations without using built-in string functions.


---

1. Find the Length of a String Without Using strlen()

#include <stdio.h>

int main() {
    char str[100];
    int length = 0;

    printf("Enter a string: ");
    scanf("%s", str);

    while (str[length] != '\0') {
        length++;
    }

    printf("Length of the string: %d\n", length);

    return 0;
}


---

2. Concatenate Two Strings Without Using strcat()

#include <stdio.h>

int main() {
    char str1[100], str2[100];
    int i = 0, j = 0;

    printf("Enter first string: ");
    scanf("%s", str1);
    
    printf("Enter second string: ");
    scanf("%s", str2);

    while (str1[i] != '\0') {
        i++;
    }

    while (str2[j] != '\0') {
        str1[i] = str2[j];
        i++;
        j++;
    }
    
    str1[i] = '\0'; // Null-terminate the concatenated string

    printf("Concatenated String: %s\n", str1);

    return 0;
}


---

3. Check if a String is a Palindrome Without Using strcmp()

#include <stdio.h>

int main() {
    char str[100];
    int i, length = 0, flag = 1;

    printf("Enter a string: ");
    scanf("%s", str);

    while (str[length] != '\0') {
        length++;
    }

    for (i = 0; i < length / 2; i++) {
        if (str[i] != str[length - i - 1]) {
            flag = 0;
            break;
        }
    }

    if (flag == 1)
        printf("The string is a palindrome.\n");
    else
        printf("The string is not a palindrome.\n");

    return 0;
}


---

These programs give a manual implementation of common string operations without using built-in functions. Let me know if you need any modifications or explanations!

next

Here are the C programs for your array and matrix operations without using functions:


---

1. Count Frequency of Each Element in an Array

#include <stdio.h>

int main() {
    int arr[100], freq[100];
    int n, i, j, count;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter the elements: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
        freq[i] = -1; // Initialize frequency array
    }

    for (i = 0; i < n; i++) {
        count = 1;
        for (j = i + 1; j < n; j++) {
            if (arr[i] == arr[j]) {
                count++;
                freq[j] = 0; // Mark as counted
            }
        }
        if (freq[i] != 0) {
            freq[i] = count;
        }
    }

    printf("Element - Frequency\n");
    for (i = 0; i < n; i++) {
        if (freq[i] != 0) {
            printf("%d - %d\n", arr[i], freq[i]);
        }
    }

    return 0;
}


---

2. Remove Duplicate Elements in an Array

#include <stdio.h>

int main() {
    int arr[100], n, i, j, k;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter the elements: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (arr[i] == arr[j]) { // Duplicate found
                for (k = j; k < n - 1; k++) {
                    arr[k] = arr[k + 1]; // Shift elements left
                }
                n--; 
                j--; // Re-check at new position
            }
        }
    }

    printf("Array after removing duplicates: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}


---

3. Find Row-wise and Column-wise Sum of Elements in a Matrix

#include <stdio.h>

int main() {
    int mat[10][10], row, col, i, j;
    
    printf("Enter number of rows and columns: ");
    scanf("%d %d", &row, &col);

    printf("Enter elements of the matrix:\n");
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++) {
            scanf("%d", &mat[i][j]);
        }
    }

    printf("Row-wise Sum:\n");
    for (i = 0; i < row; i++) {
        int rowSum = 0;
        for (j = 0; j < col; j++) {
            rowSum += mat[i][j];
        }
        printf("Row %d: %d\n", i + 1, rowSum);
    }

    printf("Column-wise Sum:\n");
    for (j = 0; j < col; j++) {
        int colSum = 0;
        for (i = 0; i < row; i++) {
            colSum += mat[i][j];
        }
        printf("Column %d: %d\n", j + 1, colSum);
    }

    return 0;
}


---

4. Check Whether a Matrix is Symmetric or Not

#include <stdio.h>

int main() {
    int mat[10][10], trans[10][10], n, i, j, flag = 1;

    printf("Enter size of square matrix (n x n): ");
    scanf("%d", &n);

    printf("Enter elements of the matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &mat[i][j]);
        }
    }

    // Transpose the matrix
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            trans[j][i] = mat[i][j];
        }
    }

    // Compare matrix and its transpose
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (mat[i][j] != trans[i][j]) {
                flag = 0;
                break;
            }
        }
    }

    if (flag)
        printf("The matrix is symmetric.\n");
    else
        printf("The matrix is not symmetric.\n");

    return 0;
}


---

5. Perform Multiplication of Two Matrices

#include <stdio.h>

int main() {
    int mat1[10][10], mat2[10][10], result[10][10];
    int row1, col1, row2, col2, i, j, k;

    printf("Enter rows and columns of first matrix: ");
    scanf("%d %d", &row1, &col1);
    
    printf("Enter rows and columns of second matrix: ");
    scanf("%d %d", &row2, &col2);

    if (col1 != row2) {
        printf("Matrix multiplication not possible!\n");
        return 0;
    }

    printf("Enter elements of first matrix:\n");
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col1; j++) {
            scanf("%d", &mat1[i][j]);
        }
    }

    printf("Enter elements of second matrix:\n");
    for (i = 0; i < row2; i++) {
        for (j = 0; j < col2; j++) {
            scanf("%d", &mat2[i][j]);
        }
    }

    // Initialize result matrix with zeros
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col2; j++) {
            result[i][j] = 0;
        }
    }

    // Matrix multiplication
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col2; j++) {
            for (k = 0; k < col1; k++) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    printf("Resultant Matrix:\n");
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col2; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }

    return 0;
}


---

These C programs manually implement the required array and matrix operations without using functions. Let me know if you need any modifications or explanations!


next



Here are the C programs for your next lab, without using functions:


---

1. Find Factorial of a Number

#include <stdio.h>

int main() {
    int n, i;
    unsigned long long factorial = 1; // Factorial can be large, use long long

    printf("Enter a number: ");
    scanf("%d", &n);

    if (n < 0) {
        printf("Factorial of a negative number doesn't exist.\n");
    } else {
        for (i = 1; i <= n; i++) {
            factorial *= i;
        }
        printf("Factorial of %d is %llu\n", n, factorial);
    }

    return 0;
}


---

2. Generate Fibonacci Series Up to N Terms

#include <stdio.h>

int main() {
    int n, i;
    int first = 0, second = 1, next;

    printf("Enter the number of terms: ");
    scanf("%d", &n);

    printf("Fibonacci Series: ");
    for (i = 0; i < n; i++) {
        if (i <= 1) {
            next = i;
        } else {
            next = first + second;
            first = second;
            second = next;
        }
        printf("%d ", next);
    }
    printf("\n");

    return 0;
}


---

3. Find Smallest and Largest Element in an Array

#include <stdio.h>

int main() {
    int arr[100], n, i, smallest, largest;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter the elements: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    smallest = largest = arr[0];

    for (i = 1; i < n; i++) {
        if (arr[i] < smallest) {
            smallest = arr[i];
        }
        if (arr[i] > largest) {
            largest = arr[i];
        }
    }

    printf("Smallest element: %d\n", smallest);
    printf("Largest element: %d\n", largest);

    return 0;
}


---

4. Search for an Element in an Array

#include <stdio.h>

int main() {
    int arr[100], n, i, search, found = 0;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter the elements: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter the element to search: ");
    scanf("%d", &search);

    for (i = 0; i < n; i++) {
        if (arr[i] == search) {
            found = 1;
            printf("Element %d found at index %d\n", search, i);
            break; // Stop searching after first occurrence
        }
    }

    if (!found) {
        printf("Element %d not found in the array.\n", search);
    }

    return 0;
}


---

5. Perform Bubble Sort on an Array

#include <stdio.h>

int main() {
    int arr[100], n, i, j, temp;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter the elements: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Bubble sort algorithm
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) { // Swap if element is greater than next
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    printf("Sorted array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}


---

These C programs handle factorials, Fibonacci series, array operations, searching, and sorting without using functions. Let me know if you need any modifications or explanations!

next

Here are the C programs for your next lab, without using functions:


---

1. Find Factors of a Number

#include <stdio.h>

int main() {
    int n, i;
    
    printf("Enter a number: ");
    scanf("%d", &n);
    
    printf("Factors of %d are: ", n);
    for (i = 1; i <= n; i++) {
        if (n % i == 0) {
            printf("%d ", i);
        }
    }
    printf("\n");
    
    return 0;
}


---

2. Generate Multiplication Table of a Number

#include <stdio.h>

int main() {
    int n, i;
    
    printf("Enter a number: ");
    scanf("%d", &n);
    
    printf("Multiplication Table of %d:\n", n);
    for (i = 1; i <= 10; i++) {
        printf("%d x %d = %d\n", n, i, n * i);
    }
    
    return 0;
}


---

3. Find LCM of Two Numbers

#include <stdio.h>

int main() {
    int num1, num2, max;

    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);

    max = (num1 > num2) ? num1 : num2; // Start from the larger number

    while (1) {
        if (max % num1 == 0 && max % num2 == 0) {
            printf("LCM of %d and %d is %d\n", num1, num2, max);
            break;
        }
        max++;
    }

    return 0;
}


---

4. Find Sum of Odd and Even Digits of a Number

#include <stdio.h>

int main() {
    int num, digit, evenSum = 0, oddSum = 0;

    printf("Enter a number: ");
    scanf("%d", &num);

    while (num > 0) {
        digit = num % 10;
        if (digit % 2 == 0) {
            evenSum += digit;
        } else {
            oddSum += digit;
        }
        num /= 10;
    }

    printf("Sum of even digits: %d\n", evenSum);
    printf("Sum of odd digits: %d\n", oddSum);

    return 0;
}


---

5. Find Sum of Digits of a Number

#include <stdio.h>

int main() {
    int num, digit, sum = 0;

    printf("Enter a number: ");
    scanf("%d", &num);

    while (num > 0) {
        digit = num % 10;
        sum += digit;
        num /= 10;
    }

    printf("Sum of digits: %d\n", sum);

    return 0;
}


---

These programs efficiently perform number factorization, multiplication table generation, LCM calculation, and digit-based operations without using functions. Let me know if you need any explanations or modifications!



next


Here are the C programs for your next lab, without using functions:


---

1. Program to Find the Sum & Average of 3 Numbers

#include <stdio.h>

int main() {
    int a, b, c;
    float sum, avg;

    printf("Enter three numbers: ");
    scanf("%d %d %d", &a, &b, &c);

    sum = a + b + c;
    avg = sum / 3.0;

    printf("Sum = %.2f\n", sum);
    printf("Average = %.2f\n", avg);

    return 0;
}


---

2. Program to Find the Roots of a Quadratic Equation

#include <stdio.h>
#include <math.h>

int main() {
    float a, b, c, discriminant, root1, root2, realPart, imagPart;

    printf("Enter coefficients a, b, and c: ");
    scanf("%f %f %f", &a, &b, &c);

    discriminant = b * b - 4 * a * c;

    if (discriminant > 0) {  // Two real and distinct roots
        root1 = (-b + sqrt(discriminant)) / (2 * a);
        root2 = (-b - sqrt(discriminant)) / (2 * a);
        printf("Roots are real and distinct: %.2f and %.2f\n", root1, root2);
    } 
    else if (discriminant == 0) {  // One real and equal root
        root1 = root2 = -b / (2 * a);
        printf("Roots are real and equal: %.2f\n", root1);
    } 
    else {  // Complex roots
        realPart = -b / (2 * a);
        imagPart = sqrt(-discriminant) / (2 * a);
        printf("Roots are complex: %.2f + %.2fi and %.2f - %.2fi\n", realPart, imagPart, realPart, imagPart);
    }

    return 0;
}


---

3. Program to Implement Bitwise Operators (AND, OR, NOT, XOR, Left Shift, Right Shift)

#include <stdio.h>

int main() {
    int a, b;

    printf("Enter two numbers: ");
    scanf("%d %d", &a, &b);

    printf("Bitwise AND: %d & %d = %d\n", a, b, a & b);
    printf("Bitwise OR: %d | %d = %d\n", a, b, a | b);
    printf("Bitwise XOR: %d ^ %d = %d\n", a, b, a ^ b);
    printf("Bitwise NOT: ~%d = %d, ~%d = %d\n", a, ~a, b, ~b);
    printf("Left Shift (%d << 1): %d\n", a, a << 1);
    printf("Right Shift (%d >> 1): %d\n", a, a >> 1);

    return 0;
}


---

4. Program to Check Whether a Triangle is Isosceles, Equilateral, or Scalene

#include <stdio.h>

int main() {
    int side1, side2, side3;

    printf("Enter three sides of the triangle: ");
    scanf("%d %d %d", &side1, &side2, &side3);

    if (side1 == side2 && side2 == side3) {
        printf("The triangle is Equilateral.\n");
    } 
    else if (side1 == side2 || side2 == side3 || side1 == side3) {
        printf("The triangle is Isosceles.\n");
    } 
    else {
        printf("The triangle is Scalene.\n");
    }

    return 0;
}


---

5. Program to Check if a Number is Odd/Even, Positive/Negative, or Prime Using Switch-Case

#include <stdio.h>

int main() {
    int num, choice, i, isPrime = 1;

    printf("Enter a number: ");
    scanf("%d", &num);

    printf("\n1. Check Odd/Even\n2. Check Positive/Negative\n3. Check Prime\nEnter choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            if (num % 2 == 0)
                printf("%d is Even.\n", num);
            else
                printf("%d is Odd.\n", num);
            break;

        case 2:
            if (num > 0)
                printf("%d is Positive.\n", num);
            else if (num < 0)
                printf("%d is Negative.\n", num);
            else
                printf("%d is Zero.\n", num);
            break;

        case 3:
            if (num < 2) {
                isPrime = 0;
            } else {
                for (i = 2; i <= num / 2; i++) {
                    if (num % i == 0) {
                        isPrime = 0;
                        break;
                    }
                }
            }
            if (isPrime)
                printf("%d is a Prime number.\n", num);
            else
                printf("%d is Not a Prime number.\n", num);
            break;

        default:
            printf("Invalid choice!\n");
    }

    return 0;
}


---

These programs cover sum & average, quadratic roots, bitwise operations, triangle classification, and number properties using switch-case, all without using functions. Let me know if you need explanations or modifications!


